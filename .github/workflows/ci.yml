name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint code
      run: npm run lint || echo "No lint script found"
    
    - name: Build frontend
      run: npm run build
    
    - name: Run tests
      run: npm test || echo "No tests found"

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('src-tauri/go-backend/go.sum', 'src-tauri/go-backend/go.mod') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      working-directory: src-tauri/go-backend
      run: go mod download
    
    - name: Verify dependencies
      working-directory: src-tauri/go-backend
      run: go mod verify
    
    - name: Build backend
      working-directory: src-tauri/go-backend
      run: go build -v ./...
    
    - name: Run tests
      working-directory: src-tauri/go-backend
      run: go test -race -vet=off ./...

  build-tauri:
    name: Build Tauri App
    runs-on: ${{ matrix.platform }}
    needs: [test-frontend, test-backend]
    
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
    
    - name: Install dependencies (Ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install Go backend dependencies
      working-directory: src-tauri/go-backend
      run: go mod download
    
    - name: Make build script executable (Unix only)
      if: runner.os != 'Windows'
      working-directory: src-tauri/go-backend
      run: chmod +x build.sh
    
    - name: Build frontend
      run: npm run build
    
    - name: Build Tauri app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tagName: v__VERSION__
        releaseName: 'S3 Deck v__VERSION__'
        releaseBody: 'See the assets to download this version and install.'
        releaseDraft: true
        prerelease: false
        includeDebug: false