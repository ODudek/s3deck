name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  version-consistency:
    name: Check Version Consistency
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_tag: ${{ steps.get_version.outputs.should_tag }}
      branch_type: ${{ steps.get_version.outputs.branch_type }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check version consistency
        id: get_version
        run: |
          # Run version consistency check and capture output
          echo "## 🔍 Version Consistency Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run the check and capture both success/failure
          if npm run check-version; then
            echo "✅ **All versions are consistent!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Version consistency check failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please fix version mismatches before proceeding." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Get current version and check if tag should be created
          VERSION=$(npm run gh:current-version --silent)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

          # Add version info to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 package.json | \`$VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 🦀 tauri.conf.json | \`$VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📦 Cargo.toml | \`$VERSION\` |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 CHANGELOG.md | \`$VERSION\` |" >> $GITHUB_STEP_SUMMARY

          # Check if we should create a tag using Node.js script
          TAG_CHECK=$(node scripts/github-utils.cjs check-tag)
          SHOULD_TAG=$(echo "$TAG_CHECK" | node -e "const data = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(data.shouldCreate)")

          # Add branch and tag info to summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🌊 Git Flow Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          CURRENT_BRANCH=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          echo "**Current Branch:** \`$CURRENT_BRANCH\`" >> $GITHUB_STEP_SUMMARY

          # Override should_tag based on Git Flow rules
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Main branch: always create release tags
            echo "should_tag=$SHOULD_TAG" >> $GITHUB_OUTPUT
            echo "branch_type=production" >> $GITHUB_OUTPUT
            echo "**Branch Type:** 🚀 Production" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.ref }}" = "refs/heads/develop" ]; then
            # Develop branch: create pre-release tags
            echo "should_tag=$SHOULD_TAG" >> $GITHUB_OUTPUT
            echo "branch_type=prerelease" >> $GITHUB_STEP_SUMMARY
            echo "**Branch Type:** 🧪 Pre-release" >> $GITHUB_STEP_SUMMARY
          else
            # Feature/other branches: no tags
            echo "should_tag=false" >> $GITHUB_OUTPUT
            echo "branch_type=feature" >> $GITHUB_OUTPUT
            echo "**Branch Type:** 🔧 Feature" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏷️ Tagging Decision" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$SHOULD_TAG" = "true" ]; then
            BRANCH_TYPE=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
            if [ "$BRANCH_TYPE" = "main" ]; then
              echo "✅ **Will create production tag:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
              echo "📦 Will create production tag: v$VERSION"
            elif [ "$BRANCH_TYPE" = "develop" ]; then
              echo "✅ **Will create pre-release tag:** \`v$VERSION-beta\`" >> $GITHUB_STEP_SUMMARY
              echo "📦 Will create pre-release tag: v$VERSION-beta"
            fi
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This will trigger the release workflow automatically." >> $GITHUB_STEP_SUMMARY
          else
            REASON=$(echo "$TAG_CHECK" | node -e "const data = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(data.reason || 'unknown')")
            echo "ℹ️ **Will not create tag**" >> $GITHUB_STEP_SUMMARY
            echo "**Reason:** \`$REASON\`" >> $GITHUB_STEP_SUMMARY
            echo "🏷️ Will not create tag. Reason: $REASON"
          fi

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [version-consistency]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint || echo "No lint script found"

      - name: Build frontend
        run: npm run build

      - name: Run tests
        run: |
          echo "## 🧪 Frontend Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if npm test || echo "No tests found"; then
            echo "✅ **Frontend tests passed**" >> $GITHUB_STEP_SUMMARY
            echo "FRONTEND_TEST_STATUS=✅ Passed" >> $GITHUB_ENV
          else
            echo "❌ **Frontend tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "FRONTEND_TEST_STATUS=❌ Failed" >> $GITHUB_ENV
            exit 1
          fi

  test-backend:
    name: Test Rust Backend
    runs-on: ubuntu-latest
    needs: [version-consistency]

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Check Rust code
        working-directory: src-tauri
        run: cargo check

      - name: Run Rust tests
        working-directory: src-tauri
        run: |
          echo "## 🦀 Rust Backend Tests" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if cargo test; then
            echo "✅ **Rust backend tests passed**" >> $GITHUB_STEP_SUMMARY
            echo "BACKEND_TEST_STATUS=✅ Passed" >> $GITHUB_ENV
          else
            echo "❌ **Rust backend tests failed**" >> $GITHUB_STEP_SUMMARY
            echo "BACKEND_TEST_STATUS=❌ Failed" >> $GITHUB_ENV
            exit 1
          fi

  build-tauri:
    name: Build Tauri App
    runs-on: ${{ matrix.platform }}
    needs: [test-frontend, test-backend]

    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app (test build only)
        run: |
          echo "## 🏗️ Build Test - ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if npm run tauri build; then
            echo "✅ **Build successful on ${{ matrix.platform }}**" >> $GITHUB_STEP_SUMMARY
            echo "BUILD_TEST_STATUS=✅ Passed" >> $GITHUB_ENV
          else
            echo "❌ **Build failed on ${{ matrix.platform }}**" >> $GITHUB_STEP_SUMMARY
            echo "BUILD_TEST_STATUS=❌ Failed" >> $GITHUB_ENV
            exit 1
          fi

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: [version-consistency, test-frontend, test-backend, build-tauri]
    if: needs.version-consistency.outputs.should_tag == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate release notes
        id: release_notes
        run: |
          # Generate release notes from changelog using Node.js script
          RELEASE_NOTES=$(node scripts/github-utils.cjs release-notes)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.version-consistency.outputs.version }}"
          BRANCH_TYPE="${{ needs.version-consistency.outputs.branch_type }}"

          echo "## 🏷️ Creating Release Tag" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create appropriate tag based on branch
          if [ "$BRANCH_TYPE" = "production" ]; then
            # Production release from main branch
            echo "**Tag Type:** 🚀 Production Release" >> $GITHUB_STEP_SUMMARY
            echo "**Tag Name:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "**Source Branch:** \`main\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            node scripts/github-utils.cjs create-tag "$VERSION" "Release v$VERSION"
            echo "TAG=v$VERSION" >> $GITHUB_ENV

            echo "✅ **Successfully created production tag:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          elif [ "$BRANCH_TYPE" = "prerelease" ]; then
            # Pre-release from develop branch
            PRERELEASE_TAG="$VERSION-beta"
            echo "**Tag Type:** 🧪 Pre-release" >> $GITHUB_STEP_SUMMARY
            echo "**Tag Name:** \`v$PRERELEASE_TAG\`" >> $GITHUB_STEP_SUMMARY
            echo "**Source Branch:** \`develop\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            node scripts/github-utils.cjs create-tag "$PRERELEASE_TAG" "Pre-release v$PRERELEASE_TAG"
            echo "TAG=v$PRERELEASE_TAG" >> $GITHUB_ENV

            echo "✅ **Successfully created pre-release tag:** \`v$PRERELEASE_TAG\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Trigger release workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use the tag that was just created
          TAG_TO_RELEASE="$TAG"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Triggering Release Workflow" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release Tag:** \`$TAG_TO_RELEASE\`" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** \`tag-release.yml\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Trigger the tag-release workflow using Node.js script
          if node scripts/github-utils.cjs trigger-release "$TAG_TO_RELEASE"; then
            echo "✅ **Release workflow triggered successfully!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View Release Workflow](https://github.com/${{ github.repository }}/actions/workflows/tag-release.yml)" >> $GITHUB_STEP_SUMMARY
            echo "🔗 [View All Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Failed to trigger release workflow**" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs:
      [
        version-consistency,
        test-frontend,
        test-backend,
        build-tauri,
        create-tag,
      ]
    if: always()

    steps:
      - name: Generate Final Summary
        run: |
          echo "# 🎯 S3 Deck CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Version and branch info
          echo "## 📋 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ needs.version-consistency.outputs.version || 'N/A' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch Type** | \`${{ needs.version-consistency.outputs.branch_type || 'N/A' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job status summary
          echo "## 📊 Job Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          VERSION_STATUS="${{ needs.version-consistency.result }}"
          FRONTEND_STATUS="${{ needs.test-frontend.result }}"
          BACKEND_STATUS="${{ needs.test-backend.result }}"
          BUILD_STATUS="${{ needs.build-tauri.result }}"
          TAG_STATUS="${{ needs.create-tag.result }}"

          if [ "$VERSION_STATUS" = "success" ]; then
            echo "✅ **Version Consistency:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Version Consistency:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$FRONTEND_STATUS" = "success" ]; then
            echo "✅ **Frontend Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "$FRONTEND_STATUS" = "failure" ]; then
            echo "❌ **Frontend Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Frontend Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$BACKEND_STATUS" = "success" ]; then
            echo "✅ **Backend Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "$BACKEND_STATUS" = "failure" ]; then
            echo "❌ **Backend Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Backend Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$BUILD_STATUS" = "success" ]; then
            echo "✅ **Build Tests:** Passed (All Platforms)" >> $GITHUB_STEP_SUMMARY
          elif [ "$BUILD_STATUS" = "failure" ]; then
            echo "❌ **Build Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Build Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$TAG_STATUS" = "success" ]; then
            echo "✅ **Tag Creation:** Success" >> $GITHUB_STEP_SUMMARY
          elif [ "$TAG_STATUS" = "failure" ]; then
            echo "❌ **Tag Creation:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "$TAG_STATUS" = "skipped" ]; then
            echo "⏭️ **Tag Creation:** Skipped (Not a release branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Tag Creation:** Not applicable" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [ "$VERSION_STATUS" = "success" ] && [ "$FRONTEND_STATUS" = "success" ] && [ "$BACKEND_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ]; then
            echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! " >> $GITHUB_STEP_SUMMARY

            if [ "$TAG_STATUS" = "success" ]; then
              echo "A new release has been tagged and the release workflow has been triggered." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "One or more checks failed. Please review the job details above." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🏠 [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [version-consistency, test-frontend, test-backend, build-tauri]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check CHANGELOG update
        id: changelog_check
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
        run: |
          echo "## 📋 CHANGELOG Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run changelog check and capture output
          CHANGELOG_SUMMARY=$(npm run pr:changelog-summary --silent)
          SHOULD_UPDATE=$(echo "$CHANGELOG_SUMMARY" | node -e "const data = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(data.shouldUpdateChangelog)")
          CHANGELOG_UPDATED=$(echo "$CHANGELOG_SUMMARY" | node -e "const data = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(data.changelogUpdated)")
          RECOMMENDATION=$(echo "$CHANGELOG_SUMMARY" | node -e "const data = JSON.parse(require('fs').readFileSync(0, 'utf8')); console.log(data.recommendation)")

          echo "changelog_should_update=$SHOULD_UPDATE" >> $GITHUB_OUTPUT
          echo "changelog_updated=$CHANGELOG_UPDATED" >> $GITHUB_OUTPUT
          echo "changelog_recommendation=$RECOMMENDATION" >> $GITHUB_OUTPUT

          if [ "$RECOMMENDATION" = "PASS" ]; then
            echo "✅ **CHANGELOG updated:** Changes documented in [Unreleased] section" >> $GITHUB_STEP_SUMMARY
          elif [ "$RECOMMENDATION" = "SKIP" ]; then
            echo "⏭️ **CHANGELOG update skipped:** Documentation/CI changes detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **CHANGELOG needs update:** Please document your changes" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate PR Summary Comment
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ needs.version-consistency.outputs.version }}';
            const versionStatus = '${{ needs.version-consistency.result }}';
            const frontendStatus = '${{ needs.test-frontend.result }}';
            const backendStatus = '${{ needs.test-backend.result }}';
            const buildStatus = '${{ needs.build-tauri.result }}';
            const changelogShouldUpdate = '${{ steps.changelog_check.outputs.changelog_should_update }}';
            const changelogUpdated = '${{ steps.changelog_check.outputs.changelog_updated }}';
            const changelogRecommendation = '${{ steps.changelog_check.outputs.changelog_recommendation }}';

            function getStatusEmoji(status) {
              switch(status) {
                case 'success': return '✅';
                case 'failure': return '❌';
                case 'skipped': return '⏭️';
                default: return '⚠️';
              }
            }

            function getChangelogStatus() {
              switch(changelogRecommendation) {
                case 'PASS': return '✅ Updated';
                case 'SKIP': return '⏭️ Not needed';
                case 'UPDATE_NEEDED': return '⚠️ Needs update';
                default: return '❓ Unknown';
              }
            }

            const allTestsPassed = versionStatus === 'success' && frontendStatus === 'success' &&
                                  backendStatus === 'success' && buildStatus === 'success';

            const changelogOk = changelogRecommendation === 'PASS' || changelogRecommendation === 'SKIP';
            const allPassed = allTestsPassed && changelogOk;

            const body = `## 🔍 CI/CD Summary for PR #${{ github.event.number }}

### 📋 Build Information
| Item | Value |
|------|-------|
| **Version** | \`${version}\` |
| **Source Branch** | \`${{ github.head_ref }}\` |
| **Target Branch** | \`${{ github.base_ref }}\` |
| **Commit** | \`${{ github.event.pull_request.head.sha }}\` |

### 📊 Test Results
| Check | Status | Result |
|-------|--------|--------|
| Version Consistency | ${getStatusEmoji(versionStatus)} | ${versionStatus} |
| Frontend Tests | ${getStatusEmoji(frontendStatus)} | ${frontendStatus} |
| Backend Tests | ${getStatusEmoji(backendStatus)} | ${backendStatus} |
| Build Tests (All Platforms) | ${getStatusEmoji(buildStatus)} | ${buildStatus} |
| CHANGELOG Update | ${changelogRecommendation === 'PASS' ? '✅' : changelogRecommendation === 'SKIP' ? '⏭️' : '⚠️'} | ${getChangelogStatus()} |

### ${allPassed ? '🎉' : '⚠️'} Overall Status: ${allPassed ? 'READY TO MERGE' : 'NEEDS ATTENTION'}

${allPassed ?
  '✅ All checks passed! This PR is ready for review and merge.' :
  `❌ ${allTestsPassed ? 'Tests passed but' : 'Some tests failed and'} ${changelogOk ? '' : 'CHANGELOG needs updating. '}Please review and fix any issues before merging.`}

${changelogRecommendation === 'UPDATE_NEEDED' ?
  `
### 📝 CHANGELOG Update Required
Please add your changes to the \`[Unreleased]\` section of CHANGELOG.md. If this PR doesn't require changelog updates, add one of these prefixes to the title:
- \`docs:\` - Documentation changes
- \`ci:\` - CI/CD changes
- \`chore:\` - Maintenance tasks
- \`[skip changelog]\` - Explicit skip` : ''}

### 🔗 Quick Links
- 🏃‍♂️ [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
- 📝 [View Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)
- 🔧 [Repository Actions](https://github.com/${{ github.repository }}/actions)

---
*This comment is automatically updated on each push to the PR.*`;

            // Check if there's already a comment from this bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('CI/CD Summary for PR')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  pr-status-check:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [pr-summary]
    if: github.event_name == 'pull_request'
    permissions:
      statuses: write
      checks: write

    steps:
      - name: Set PR Status
        uses: actions/github-script@v7
        with:
          script: |
            const summary = '${{ needs.pr-summary.result }}';
            const prNumber = context.issue.number;

            let state, description;

            if (summary === 'success') {
              state = 'success';
              description = '✅ All checks passed - Ready for review';
            } else {
              state = 'failure';
              description = '❌ Some checks failed - Review required';
            }

            // Create status check
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'S3 Deck CI/CD'
            });

            // Also create a check run for better visibility
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'S3 Deck PR Summary',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: state === 'success' ? 'success' : 'failure',
              output: {
                title: state === 'success' ? 'All checks passed!' : 'Some checks failed',
                summary: `PR #${prNumber} ${state === 'success' ? 'is ready for review' : 'needs attention'}`,
                text: `View the full summary in the [workflow run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              }
            });
