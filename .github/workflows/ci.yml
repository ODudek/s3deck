name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write

concurrency:
  group: ci-${{ github.ref }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  version-consistency:
    name: Check Version Consistency
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      should_tag: ${{ steps.get_version.outputs.should_tag }}
      branch_type: ${{ steps.get_version.outputs.branch_type }}

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check version consistency
        id: get_version
        run: npm run ci:version-check

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    needs: [version-consistency]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint || echo "No lint script found"

      - name: Build frontend
        run: npm run build

      - name: Run tests
        run: npm run ci:test-frontend

  test-backend:
    name: Test Rust Backend
    runs-on: ubuntu-latest
    needs: [version-consistency]

    steps:
      - uses: actions/checkout@v5

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu only)
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Check Rust code
        working-directory: src-tauri
        run: cargo check

      - name: Run Rust tests
        run: npm run ci:test-backend

  build-tauri:
    name: Build Tauri App
    runs-on: ${{ matrix.platform }}
    needs: [test-frontend, test-backend]

    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build Tauri app (test build only)
        run: npm run ci:test-build ${{ matrix.platform }}

  create-tag:
    name: Create Tag
    runs-on: ubuntu-latest
    needs: [version-consistency, test-frontend, test-backend, build-tauri]
    if: needs.version-consistency.outputs.should_tag == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Generate release notes
        id: release_notes
        run: |
          # Generate release notes from changelog using Node.js script
          RELEASE_NOTES=$(node scripts/github-utils.cjs release-notes)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create and push tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ needs.version-consistency.outputs.version }}"
          BRANCH_TYPE="${{ needs.version-consistency.outputs.branch_type }}"

          echo "## 🏷️ Creating Release Tag" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Create appropriate tag based on branch
          if [ "$BRANCH_TYPE" = "production" ]; then
            # Production release from main branch
            echo "**Tag Type:** 🚀 Production Release" >> $GITHUB_STEP_SUMMARY
            echo "**Tag Name:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
            echo "**Source Branch:** \`main\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            node scripts/github-utils.cjs create-tag "$VERSION" "Release v$VERSION"
            echo "TAG=v$VERSION" >> $GITHUB_ENV

            echo "✅ **Successfully created production tag:** \`v$VERSION\`" >> $GITHUB_STEP_SUMMARY
          elif [ "$BRANCH_TYPE" = "prerelease" ]; then
            # Pre-release from develop branch
            PRERELEASE_TAG="$VERSION-beta"
            echo "**Tag Type:** 🧪 Pre-release" >> $GITHUB_STEP_SUMMARY
            echo "**Tag Name:** \`v$PRERELEASE_TAG\`" >> $GITHUB_STEP_SUMMARY
            echo "**Source Branch:** \`develop\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            node scripts/github-utils.cjs create-tag "$PRERELEASE_TAG" "Pre-release v$PRERELEASE_TAG"
            echo "TAG=v$PRERELEASE_TAG" >> $GITHUB_ENV

            echo "✅ **Successfully created pre-release tag:** \`v$PRERELEASE_TAG\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Tag Created Successfully
        run: |
          # Use the tag that was just created
          TAG_TO_RELEASE="$TAG"

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🏷️ Tag Created Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Created Tag:** \`$TAG_TO_RELEASE\`" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** Manual trigger required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tag created successfully!** To create a release:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to [GitHub Actions → Tag Release](https://github.com/${{ github.repository }}/actions/workflows/tag-release.yml)" >> $GITHUB_STEP_SUMMARY
          echo "2. Click **Run workflow**" >> $GITHUB_STEP_SUMMARY
          echo "3. Enter tag: \`$TAG_TO_RELEASE\`" >> $GITHUB_STEP_SUMMARY
          echo "4. Click **Run workflow** to build and release" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [Manual Release Trigger](https://github.com/${{ github.repository }}/actions/workflows/tag-release.yml)" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View All Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs:
      [
        version-consistency,
        test-frontend,
        test-backend,
        build-tauri,
        create-tag,
      ]
    if: always()

    steps:
      - name: Generate Final Summary
        run: |
          echo "# 🎯 S3 Deck CI/CD Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Version and branch info
          echo "## 📋 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ needs.version-consistency.outputs.version || 'N/A' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch** | \`${{ github.ref_name }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch Type** | \`${{ needs.version-consistency.outputs.branch_type || 'N/A' }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | \`${{ github.sha }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Triggered by** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Job status summary
          echo "## 📊 Job Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          VERSION_STATUS="${{ needs.version-consistency.result }}"
          FRONTEND_STATUS="${{ needs.test-frontend.result }}"
          BACKEND_STATUS="${{ needs.test-backend.result }}"
          BUILD_STATUS="${{ needs.build-tauri.result }}"
          TAG_STATUS="${{ needs.create-tag.result }}"

          if [ "$VERSION_STATUS" = "success" ]; then
            echo "✅ **Version Consistency:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Version Consistency:** Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$FRONTEND_STATUS" = "success" ]; then
            echo "✅ **Frontend Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "$FRONTEND_STATUS" = "failure" ]; then
            echo "❌ **Frontend Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Frontend Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$BACKEND_STATUS" = "success" ]; then
            echo "✅ **Backend Tests:** Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "$BACKEND_STATUS" = "failure" ]; then
            echo "❌ **Backend Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Backend Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$BUILD_STATUS" = "success" ]; then
            echo "✅ **Build Tests:** Passed (All Platforms)" >> $GITHUB_STEP_SUMMARY
          elif [ "$BUILD_STATUS" = "failure" ]; then
            echo "❌ **Build Tests:** Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Build Tests:** Skipped" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$TAG_STATUS" = "success" ]; then
            echo "✅ **Tag Creation:** Success" >> $GITHUB_STEP_SUMMARY
          elif [ "$TAG_STATUS" = "failure" ]; then
            echo "❌ **Tag Creation:** Failed" >> $GITHUB_STEP_SUMMARY
          elif [ "$TAG_STATUS" = "skipped" ]; then
            echo "⏭️ **Tag Creation:** Skipped (Not a release branch)" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Tag Creation:** Not applicable" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [ "$VERSION_STATUS" = "success" ] && [ "$FRONTEND_STATUS" = "success" ] && [ "$BACKEND_STATUS" = "success" ] && [ "$BUILD_STATUS" = "success" ]; then
            echo "## 🎉 Overall Status: SUCCESS" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All checks passed! " >> $GITHUB_STEP_SUMMARY

            if [ "$TAG_STATUS" = "success" ]; then
              echo "A new release has been tagged and the release workflow has been triggered." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ❌ Overall Status: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "One or more checks failed. Please review the job details above." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🏠 [Repository](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 [Actions](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- 📦 [Releases](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 [Changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md)" >> $GITHUB_STEP_SUMMARY

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [version-consistency, test-frontend, test-backend, build-tauri]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Check CHANGELOG update
        id: changelog_check
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_BODY: ${{ github.event.pull_request.body }}
          VERSION_STATUS: ${{ needs.version-consistency.result }}
          FRONTEND_STATUS: ${{ needs.test-frontend.result }}
          BACKEND_STATUS: ${{ needs.test-backend.result }}
          BUILD_STATUS: ${{ needs.build-tauri.result }}
          VERSION: ${{ needs.version-consistency.outputs.version }}
          PR_NUMBER: ${{ github.event.number }}
        run: npm run ci:pr-workflow

      - name: Update PR Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PR_NUMBER: ${{ github.event.number }}
        run: node scripts/github-pr-comment.cjs upsert

  pr-status-check:
    name: PR Status Check
    runs-on: ubuntu-latest
    needs: [pr-summary, version-consistency, test-frontend, test-backend, build-tauri]
    if: github.event_name == 'pull_request'
    permissions:
      statuses: write
      checks: write

    steps:
      - uses: actions/checkout@v5

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create Status Check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          TEST_RESULTS: |
            {
              "versionStatus": "${{ needs.version-consistency.result }}",
              "frontendStatus": "${{ needs.test-frontend.result }}",
              "backendStatus": "${{ needs.test-backend.result }}",
              "buildStatus": "${{ needs.build-tauri.result }}"
            }
          STATUS_TARGET_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: node scripts/github-status-check.cjs auto

      - name: Create Check Run
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_SHA: ${{ github.event.pull_request.head.sha }}
          PR_SUMMARY_STATUS: ${{ needs.pr-summary.result }}
          PR_NUMBER: ${{ github.event.number }}
        run: |
          # Create a GitHub check run for better PR visibility
          if [ "$PR_SUMMARY_STATUS" = "success" ]; then
            STATUS="success"
            TITLE="All checks passed!"
            SUMMARY="PR #$PR_NUMBER is ready for review"
          else
            STATUS="failure" 
            TITLE="Some checks failed"
            SUMMARY="PR #$PR_NUMBER needs attention"
          fi
          
          node -e "
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const [owner, repo] = process.env.GITHUB_REPOSITORY.split('/');
          
          octokit.rest.checks.create({
            owner,
            repo,
            name: 'S3 Deck PR Summary',
            head_sha: process.env.GITHUB_SHA,
            status: 'completed',
            conclusion: process.env.STATUS || 'failure',
            output: {
              title: process.env.TITLE || 'Check completed',
              summary: process.env.SUMMARY || 'PR check summary',
              text: \`View the full summary in the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\`
            }
          }).then(() => console.log('Check run created successfully'))
            .catch(err => { console.error('Failed to create check run:', err.message); process.exit(1); });
          "
        env:
          STATUS: ${{ needs.pr-summary.result == 'success' && 'success' || 'failure' }}
          TITLE: ${{ needs.pr-summary.result == 'success' && 'All checks passed!' || 'Some checks failed' }}
          SUMMARY: ${{ needs.pr-summary.result == 'success' && format('PR #{0} is ready for review', github.event.number) || format('PR #{0} needs attention', github.event.number) }}
