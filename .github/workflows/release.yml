name: Release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        # Extract version from package.json
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
        echo "Version: v$VERSION"
    
    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: S3 Deck ${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸš€ What's New
          
          Auto-generated release from main branch.
          
          ## ðŸ“¦ Installation
          
          ### Windows
          - Download `S3Deck_*_x64_en-US.msi` for Windows installer
          - Or download `S3Deck.exe` for portable version
          
          ### macOS
          - Download `S3Deck_*_aarch64.dmg` for Apple Silicon (M1/M2)
          - Download `S3Deck_*_x64.dmg` for Intel Macs
          
          ### Linux
          - Download `S3Deck_*_amd64.AppImage` for AppImage
          - Download `S3Deck_*_amd64.deb` for Debian/Ubuntu
          
          ## ðŸ”§ Verification
          
          All binaries are signed and can be verified using the checksums provided.
        draft: false
        prerelease: false

  build-release:
    name: Build Release (${{ matrix.platform }})
    runs-on: ${{ matrix.platform }}
    needs: create-release
    if: github.ref == 'refs/heads/main'
    
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-20.04, windows-latest]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
    
    - name: Install Rust stable
      uses: dtolnay/rust-toolchain@stable
    
    - name: Rust cache
      uses: swatinem/rust-cache@v2
      with:
        workspaces: './src-tauri -> target'
    
    - name: Install dependencies (Ubuntu only)
      if: matrix.platform == 'ubuntu-20.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
    
    - name: Install frontend dependencies
      run: npm ci
    
    - name: Install Go backend dependencies
      working-directory: src-tauri/go-backend
      run: go mod download
    
    - name: Get version
      id: get_version
      shell: bash
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Build Tauri app
      uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        releaseId: ${{ needs.create-release.outputs.release_id }}
        tagName: ${{ steps.get_version.outputs.VERSION }}

  update-release:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version
      id: get_version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "VERSION=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Update release to published
      uses: eregon/publish-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        release_id: ${{ needs.create-release.outputs.release_id }}